generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  fullName     String   @map("full_name") @db.VarChar(256)
  userName     String   @map("user_name") @db.VarChar(256)
  email        String   @unique @db.VarChar(256)
  passwordHash String   @map("password_hash") @db.VarChar(256)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  refreshSessions RefreshSession[]
  posts           Post[]
  comments        Comment[]
  favorites       Favorites[]

  @@map("users")
}

model RefreshSession {
  token       String
  fingerprint String
  createdAt   DateTime @default(now()) @map("created_at")
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?     @map("user_id")

  @@unique([token, fingerprint])
  @@map("refresh_sessions")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(256)
  body      String
  views     Int      @default(0)
  rating    Int      @default(0)
  author    User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  comments    Comment[]
  tagsToPosts TagsToPosts[]
  favorites   Favorites[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    Int      @map("user_id")
  Post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId    Int      @map("post_id")

  @@map("comments")
}

model Tag {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(32)
  TagsToPosts TagsToPosts[]

  @@map("tags")
}

model TagsToPosts {
  post       Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId     Int      @map("post_id")
  tag        Tag      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId      Int      @map("tag_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([postId, tagId])
  @@map("tags_to_posts")
}

model Favorites {
  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int  @map("user_id")
  post   Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId Int  @map("post_id")

  @@id([userId, postId])
  @@map("favorite_posts")
}
